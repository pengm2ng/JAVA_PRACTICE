Wrapper 클래스

기본형 변수를 객체로 만들어 주는 클래스

클래스 타입 > wrapper 클래스

Wrapper 클래스 < 기본형 타입 값 : 박싱(Boxing)
Wrapper 클래스 값< 기본형 타입 : 언박싱(UnBoxing)

Wrapper 클래스를 사용하는 이유

	기본형 타입을 객체로 다뤄야 할 때
	매개변수로 객체를 넘길 때
	기본형 타입이 아닌 객체로 저장해야 할 때
	객체간의 비교가 필요할 때
	
-------------------------------------------------------------------------
빠른 for 문(향사된 for문, forEach문)

for문(자료형 변수 : 배열명){

}

----------------------------------------------------------------------------
제네릭(Generic)
자료형을 정하지 않는 기법(외부에서 지정)

<대문자>
E 	: Element
K	: key
N	: Number
T	: Type
V	: Value
	
1. Generic Class
	클래스 내부에서 사용될 제네릭을 지정한다.

2. Generic Method
	클래스에 제네릭을 선언하지 않고, 메서드에만 제네릭을 선언하는 방법.
	메서드의 매개변수 또는 리턴 타입이 제네릭이라면 리턴 타입 앞에도 제네릭을 선언 해야 한다.

3. Generic Interface
	인터페이스를 지정 받을 클래스에서 타입을 지정해 준다.

----------------------------------------------------------------------------------------------------
컬렉션 프레임워크(Collcetion Framework)

많은 데이터를 쉽고 효과적으로 관리 할 수 있는 표준화 된 방법을 제공하는 클래스의 집합

컬렉션 : 자료 수집

프레임워크 : 작업을 하기 위한 틀(구조), 도구

Collection : 인터페이스		 Collections : 클래스	

1. List extends Collection
	Vector
	ArrayList
	LinkedList

2. Set extends Collection

List와 Set 인터페이스 공통요소를 Collection인터페이스에서 정의하고, 
두 인터페이스는 그것으 상속 받는다.

------------------------------------------------------------------------------------------------
ArrayList

컬렉션 클래스 중 가장 많이 사용되는 클래스.
배열을 이용해서 값을 저장한다.(각 방에 인덱스를 부여해 준다.)

인덱스를 이용해서 배열 요소에 빠르게 접근 가능하지만
크기를 늘리기 위해서는 새로운 배열을 생성하ㅗ
기존의 값들을 옮겨야 하므로 느리ㅏ.
(단, 그 다음 주소에 사용중인 값이 없을 때에는 그대로 추가된다.)

배열 : 속도가 빠르지만 고정된 메모리 양으로 인해 나중에 늘릴 수 없다.
ArrayList : 메모리 양은 마음대로 늘리고 줄일 수 있으나, 배열보다 느리다.












