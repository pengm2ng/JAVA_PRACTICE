절차 지향
어떠한 작업이 있을 때 한 명이 하는 것
어떠한 로직이 있을 때 절차적으로 진행하는 것
ex)알고리즘과 자료구조를 만드는 데
알고리즘 -> 순서 없는 자료들을 정리해서 자료를 만드는 것

객체 지향
어떠한 작업이 있을 때 여러 명이 하는 것
어떠한 로직이 있을 때 분담해서 진행하는 것
ex)자료구조를 사용하는 데

클래스

공통요소를 한데 묶어 놓은 곳
변수 : 반복되는 값을 쉽게 관리하기 위해
메서드 : 반복되는 기능들을 쉽게 관리하기 위해
클래스 : 반복되는 변수와 메서드를 쉽게 관리하기 위해

클래스 선언
		class 클래스명{
				멤버,필드(변수, 메서드)
		}

클래스 사용

	1. 클래스는 타입이다.
	2. 클래스는 주어이다.

추상적인 개념인 클래스를 실체화 해주는 객체가 필요하다.
따라서 객체화를 하고 사용해야 한다.

객체화(instance)
		클래스명 객체명 = new 클래스명();

객체는 여러 개가 있기 때문에 구분점을 주소값으로 삼는다
따라서 마침표를 찍으면 자동으로 그 객체의 주소가 클래스로 
넘어가고 그 주소값을  this 라는 변수가 받게 된다.
그래서 전역변수 사용시 this.이 생략되어 있다.
전역변수와 지역변수의 이름이 같으면 반드시 this.을 찍어서
전역변수를 구분지어 줘야 한다.

------------------------------------------------------------------------------------------
생성자
	초기화의 목적으로 사용한다.
	
	메서드의 기능과 같지만 리터타입이
	없으므로 메서드라고 부를 수 없다.
	앞으로 클래스명()를 생성자라고 부른다.