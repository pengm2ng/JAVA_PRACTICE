casting 

up casting
부모클래스 타입으로 자식 생성자를 호출하는 것
부모와 자식간의 공통 요소(재정의 된 메서드)만 사용가능하며,
자식 클래스의 추가된 필드 들은 사용할 수 없다.
부모 타입으로 선언 되었기 때문에 부모의 필드만 사용 가능하지만
자식 클래스에서 재정의를 했다면, 재정의 된 메서드로 사용된다.

down casting
자식 클래스 타입으로 부모 생성자를 호출하는 오류
부모의 범위가 더 크기 때문에 자식에 담을 수 없다.

부모가 자식을 제어할 수 있지만
자식이 부모를 제어할 수 없다.

각자의 타입이 맞는지 확인하는 방법
값 instanceof 클래스 타입

-------------------------------------------------------------------------------------
추상 클래스(불완전한 클래스)
abstract class 추상클래스명{

	abstract 리턴타입 추상메서드명();
}

추상적인 내용만 정의하고 있는 클래스로 구체적인 내용은
하위 클래스에서 구현되도록 설계한 클래스
추상클래스는(부모) 다른 클래스들의(자식) 공통요소들을 가상화 시켜놓는다.
객체화는 가능하나 잘 사용하지는 않는다.(목적에 어긋난다.)
부모 추상 클래스의 역할은 단지 자식 클래스를 만들 때 도와주는 역할을
수행하기 위해 존재한다.(다형성)
부모 추상클래스는 자식 클래스에서 구현할 메서드의 이름만 가지고 있다.
즉, {}(바디)가 없다.이러한 메서드를 추상 메서드라고 하며, 리턴 타입 앞에 abstact가 붙는다.
하지만 일반 메서드도 선언이 가능하다.

추상 메서드는 자식 클래스에서 강제적으로 반드시 재정의 해야한다.(강제성)

------------------------------------------------------------------------------------------
인터페이스

추상 클래스를 고도화 시킨 문법이며, 반드시 추상메서드와 상수만 선언해야 한다.
다른 클래스에서 인터페이스를 지정할 때에는 implements를 사용한다.
지정된 인터페이스가 가지고 있는 추상 메서드들을 반드시 재정의 해야한다.

--------------------------------------------------------------------------------------------------
마크 인터페이스
Marker interface

클래스들의 공통 그룹명으로 인터페이스를 생성하고 아무것도 구현해 놓지 않는다.
즉, 그 클래스들이 같은 그룹으로 묶였다는 표시를 하기 위해 사용한다.

---------------------------------------------------------------------------------------------------------
예외처리(Exception)

에러 : 심각한 오류
예외 : 덜 심각한 오류

try{
	시도할 문장;
}catch(예외 이름 객체명){
	오류 발생시 실행할 문장;
}